import React, { useState } from "react";

const Todo = ({
  handleAddTodo,
  handleToggleDone,
  todos,
  handleDeleteTodo,
  item,
}) => {
  const [isInputVisible, setIsInputVisible] = useState(false);
  const [newTodo, setNewTodo] = useState({ title: "", date: "" });

  const compareDate = (item) => {
    const tempDate = new Date(
      `${item.curr_year}-${item.curr_month}-${item.curr_date}`
    );
    const newDate = new Date();

    return tempDate < newDate;
  };

  const handleAddClick = (newTodo) => {
    handleAddTodo(newTodo);
    setIsInputVisible((prev) => !prev);
    setNewTodo({ title: "", date: "" });
  };
  return (
    <>
      <ul className="ul_parent">
        {todos?.map((item1) => (
          <li className="ul_parent_li">
            <div className="ul_parent_li_item">
              {!item1.done && (
                <button onClick={() => handleToggleDone(item1.id)}>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="15"
                    height="13"
                    viewBox="0 0 15 13"
                    fill="none"
                  >
                    <path
                      d="M9.57153 0.340951C9.22581 0.366666 8.75153 0.486667 8.40724 0.63238C7.98438 0.812381 7.3601 1.19952 6.9801 1.51667C6.58296 1.84952 6.26439 2.15238 5.87153 2.57095C5.33296 3.14238 5.1601 3.39381 4.70725 4.25381C4.62153 4.41524 4.51725 4.61381 4.47439 4.69381L4.39725 4.84238L4.34725 4.75238C4.14296 4.38381 3.91582 4.19524 3.45296 4.01238C3.23439 3.92524 2.9401 3.89381 2.75868 3.9381C2.70296 3.95238 2.62868 3.95524 2.48296 3.9481C1.78439 3.91238 1.34582 3.96095 1.03296 4.10952C0.694393 4.27238 0.650107 4.40381 0.385822 6.05381C0.330107 6.40381 0.260107 6.83667 0.228679 7.0181C0.0715362 7.9381 0.0243934 8.62238 0.055822 9.53238C0.075822 10.1324 0.101536 10.3752 0.178679 10.7038C0.242965 10.9738 0.342965 11.2038 0.490107 11.4152C0.554393 11.5081 0.725821 11.651 0.844393 11.711C1.12439 11.8538 1.79868 12.0167 2.35725 12.0738C2.89439 12.131 3.13725 12.1367 3.59153 12.1038C4.09582 12.0667 4.22439 12.031 4.36153 11.8938C4.44439 11.811 4.56439 11.591 4.63582 11.3924C4.65725 11.3324 4.6801 11.2824 4.68439 11.2824C4.6901 11.2824 4.7201 11.2952 4.75153 11.3095C4.85867 11.361 5.05296 11.4224 5.15725 11.4381C5.29153 11.4581 5.8301 11.5038 6.27867 11.5324C7.27867 11.5981 9.64867 11.5981 10.5572 11.5324C11.323 11.4767 11.9887 11.3667 12.293 11.2467C12.5972 11.1252 12.8972 10.8824 13.083 10.6081C13.1801 10.4638 13.3272 10.1781 13.4044 9.97952C13.6001 9.48381 13.6915 9.12238 13.8215 8.33952C13.9172 7.75238 13.9629 7.40524 14.0001 6.9681C14.0787 6.02667 14.0729 5.56095 13.9772 5.23952C13.9229 5.05667 13.7987 4.8781 13.6458 4.76524C13.5501 4.69381 13.1858 4.51238 13.0572 4.47095C12.743 4.36952 12.2672 4.31381 11.6201 4.30095C11.1715 4.29238 10.9715 4.30381 10.4644 4.36952C10.0487 4.42381 9.77153 4.43952 9.77153 4.4081C9.77153 4.36667 9.87724 4.05238 10.0658 3.53524C10.3101 2.86667 10.3587 2.71667 10.4287 2.43381C10.5472 1.95095 10.593 1.59524 10.5815 1.23667C10.5687 0.780952 10.483 0.610952 10.1915 0.458095C9.9701 0.343809 9.84581 0.319523 9.57153 0.340951ZM9.87153 1.14667C9.90867 1.16952 9.86153 1.56524 9.77867 1.92809C9.71438 2.20809 9.64581 2.42952 9.50153 2.83667C9.24295 3.56381 9.08438 4.08667 9.03581 4.37952C9.00438 4.56238 9.01867 4.65524 9.10295 4.81095C9.13438 4.86952 9.17867 4.95524 9.20295 5.00095C9.22724 5.04667 9.27295 5.10667 9.30581 5.13381C9.5201 5.31381 9.55724 5.32952 9.82295 5.35524C9.99438 5.37238 10.1315 5.36667 10.5715 5.32381C11.1915 5.26524 11.4044 5.27095 12.173 5.36095C12.7115 5.42524 12.8844 5.46238 13.1044 5.55952L13.1815 5.59381L13.1901 5.68238C13.2487 6.23524 13.0572 8.20524 12.873 8.96238C12.8172 9.18667 12.7172 9.49095 12.653 9.62667C12.5744 9.78952 12.4458 9.9781 12.333 10.091C12.2244 10.201 12.0372 10.3324 11.9101 10.3881C11.7701 10.451 11.4658 10.4967 10.8572 10.5452C10.253 10.5952 9.2801 10.6195 7.14296 10.6395C5.7201 10.6538 5.50296 10.6624 5.1501 10.7181C5.07153 10.731 4.95725 10.7538 4.89439 10.7695C4.83296 10.7852 4.7801 10.7952 4.77582 10.791C4.77296 10.7881 4.78296 10.6581 4.79867 10.501C4.88582 9.66524 4.88867 9.03095 4.81439 8.06381C4.79867 7.86524 4.7701 7.46952 4.7501 7.18238C4.70725 6.56667 4.66725 6.11667 4.62725 5.81095C4.61153 5.68952 4.59582 5.55952 4.5901 5.52381C4.58296 5.46381 4.58582 5.45381 4.61725 5.43381C4.6601 5.40524 5.0801 4.9581 5.19439 4.8181C5.23867 4.76238 5.33153 4.64381 5.4001 4.55381C5.96867 3.80952 6.96724 2.77952 7.74296 2.13809C8.44581 1.55524 9.08581 1.20524 9.57867 1.13381C9.64153 1.12524 9.85153 1.13381 9.87153 1.14667ZM2.82868 4.49667L3.13582 4.51095L3.19153 4.57238C3.22153 4.60524 3.34868 4.75381 3.47296 4.90381C3.68296 5.15524 3.70296 5.18381 3.74439 5.29667C3.85439 5.60095 3.95296 6.19381 4.03725 7.03952C4.05725 7.23952 4.09867 7.66095 4.12867 7.97524C4.2101 8.78952 4.21296 8.82381 4.22867 9.2081C4.24582 9.61381 4.23153 9.98095 4.17725 10.5681C4.1301 11.0952 4.10153 11.2252 4.00582 11.3495C3.93296 11.4452 3.92439 11.4467 3.47153 11.4452C3.11868 11.4452 3.00725 11.4381 2.62868 11.3981C2.07868 11.341 1.84011 11.3081 1.53582 11.2467C1.20011 11.1781 1.02725 11.1224 0.95725 11.0595C0.794393 10.9124 0.742964 10.591 0.742964 9.73238C0.742964 8.75238 0.77725 8.29095 0.921535 7.29667C0.988678 6.83952 1.01582 6.60381 1.10011 5.80381C1.20011 4.84238 1.22011 4.69667 1.26011 4.66238C1.35725 4.58381 1.54011 4.52095 1.74296 4.4981C1.89725 4.48095 2.47153 4.47952 2.82868 4.49667Z"
                      fill="green"
                    />
                  </svg>
                </button>
              )}
              <span
                style={{
                  backgroundColor: item1.done ? "green" : "white",
                }}
              >
                {item1.title}
              </span>
              <button onClick={() => handleDeleteTodo(item1.id)}>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  x="0px"
                  y="0px"
                  width="16"
                  height="16"
                  viewBox="0 0 30 30"
                >
                  <path d="M 14.984375 2.4863281 A 1.0001 1.0001 0 0 0 14 3.5 L 14 4 L 8.5 4 A 1.0001 1.0001 0 0 0 7.4863281 5 L 6 5 A 1.0001 1.0001 0 1 0 6 7 L 24 7 A 1.0001 1.0001 0 1 0 24 5 L 22.513672 5 A 1.0001 1.0001 0 0 0 21.5 4 L 16 4 L 16 3.5 A 1.0001 1.0001 0 0 0 14.984375 2.4863281 z M 6 9 L 7.7929688 24.234375 C 7.9109687 25.241375 8.7633438 26 9.7773438 26 L 20.222656 26 C 21.236656 26 22.088031 25.241375 22.207031 24.234375 L 24 9 L 6 9 z"></path>
                </svg>
              </button>
            </div>
          </li>
        ))}
        {!compareDate(item) ? (
          <li className="ul_parent_li">
            {isInputVisible ? (
              <>
                <input
                  type="text"
                  value={newTodo.title}
                  onChange={(e) =>
                    setNewTodo({
                      ...newTodo,
                      title: e.target.value,
                      date: `${item.curr_year}-${item.curr_month}-${item.curr_date}`,
                    })
                  }
                />
                <button
                  onClick={() => {
                    handleAddClick(newTodo);
                  }}
                >
                  Add Item
                </button>
              </>
            ) : (
              <button onClick={() => setIsInputVisible((prev) => !prev)}>
                Add Item
              </button>
            )}
          </li>
        ) : (
          <li className="ul_parent_li"></li>
        )}
      </ul>
    </>
  );
};

export default Todo;
